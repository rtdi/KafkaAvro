package io.rtdi.bigdata.kafka.avro;

import static org.junit.Assert.*;

import org.apache.avro.Schema;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import io.rtdi.bigdata.kafka.avro.datatypes.AvroDate;
import io.rtdi.bigdata.kafka.avro.datatypes.AvroDouble;
import io.rtdi.bigdata.kafka.avro.datatypes.AvroInt;
import io.rtdi.bigdata.kafka.avro.datatypes.AvroNVarchar;
import io.rtdi.bigdata.kafka.avro.recordbuilders.SchemaBuilder;
import io.rtdi.bigdata.kafka.avro.recordbuilders.ValueSchema;

public class SchemaCreationTest {

	private static final String expectedschemajson = "{\r\n"
			+ "  \"type\" : \"record\",\r\n"
			+ "  \"name\" : \"Schema1\",\r\n"
			+ "  \"fields\" : [ {\r\n"
			+ "    \"name\" : \"__change_type\",\r\n"
			+ "    \"type\" : {\r\n"
			+ "      \"type\" : \"string\",\r\n"
			+ "      \"logicalType\" : \"VARCHAR\",\r\n"
			+ "      \"length\" : 1\r\n"
			+ "    },\r\n"
			+ "    \"doc\" : \"Indicates how the row is to be processed: Insert, Update, Delete, upsert/Autocorrect, eXterminate, Truncate\",\r\n"
			+ "    \"default\" : \"UPSERT\",\r\n"
			+ "    \"__originalname\" : \"__change_type\",\r\n"
			+ "    \"__internal\" : true,\r\n"
			+ "    \"__technical\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__change_time\",\r\n"
			+ "    \"type\" : {\r\n"
			+ "      \"type\" : \"long\",\r\n"
			+ "      \"logicalType\" : \"timestamp-millis\"\r\n"
			+ "    },\r\n"
			+ "    \"doc\" : \"Timestamp of the transaction. All rows of the transaction have the same value.\",\r\n"
			+ "    \"default\" : 0,\r\n"
			+ "    \"__originalname\" : \"__change_time\",\r\n"
			+ "    \"__internal\" : true,\r\n"
			+ "    \"__technical\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__source_rowid\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"string\",\r\n"
			+ "      \"logicalType\" : \"VARCHAR\",\r\n"
			+ "      \"length\" : 30\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"Optional unqiue and static pointer to the row, e.g. Oracle rowid\",\r\n"
			+ "    \"__originalname\" : \"__source_rowid\",\r\n"
			+ "    \"__internal\" : true,\r\n"
			+ "    \"__technical\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__source_transaction\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"string\",\r\n"
			+ "      \"logicalType\" : \"VARCHAR\",\r\n"
			+ "      \"length\" : 30\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"Optional source transaction information for auditing\",\r\n"
			+ "    \"__originalname\" : \"__source_transaction\",\r\n"
			+ "    \"__internal\" : true,\r\n"
			+ "    \"__technical\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__source_system\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"string\",\r\n"
			+ "      \"logicalType\" : \"VARCHAR\",\r\n"
			+ "      \"length\" : 30\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"Optional source system information for auditing\",\r\n"
			+ "    \"__originalname\" : \"__source_system\",\r\n"
			+ "    \"__internal\" : true,\r\n"
			+ "    \"__technical\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__extension\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"array\",\r\n"
			+ "      \"items\" : {\r\n"
			+ "        \"type\" : \"record\",\r\n"
			+ "        \"name\" : \"__extension\",\r\n"
			+ "        \"doc\" : \"Extension point to add custom values to each record\",\r\n"
			+ "        \"fields\" : [ {\r\n"
			+ "          \"name\" : \"__path\",\r\n"
			+ "          \"type\" : {\r\n"
			+ "            \"type\" : \"string\",\r\n"
			+ "            \"logicalType\" : \"STRING\"\r\n"
			+ "          },\r\n"
			+ "          \"doc\" : \"An unique identifier, e.g. \\\"street\\\".\\\"house number component\\\"\",\r\n"
			+ "          \"__originalname\" : \"__path\"\r\n"
			+ "        }, {\r\n"
			+ "          \"name\" : \"__value\",\r\n"
			+ "          \"type\" : [ \"null\", {\r\n"
			+ "            \"type\" : \"boolean\",\r\n"
			+ "            \"logicalType\" : \"BOOLEAN\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"bytes\",\r\n"
			+ "            \"logicalType\" : \"BYTES\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"double\",\r\n"
			+ "            \"logicalType\" : \"DOUBLE\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"float\",\r\n"
			+ "            \"logicalType\" : \"FLOAT\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"int\",\r\n"
			+ "            \"logicalType\" : \"INT\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"long\",\r\n"
			+ "            \"logicalType\" : \"LONG\"\r\n"
			+ "          }, {\r\n"
			+ "            \"type\" : \"string\",\r\n"
			+ "            \"logicalType\" : \"STRING\"\r\n"
			+ "          } ],\r\n"
			+ "          \"doc\" : \"The value of any primitive datatype of Avro\",\r\n"
			+ "          \"__originalname\" : \"__value\"\r\n"
			+ "        } ],\r\n"
			+ "        \"__originalname\" : \"__extension\"\r\n"
			+ "      }\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"Add more columns beyond the official logical data model\",\r\n"
			+ "    \"default\" : null,\r\n"
			+ "    \"__originalname\" : \"__extension\",\r\n"
			+ "    \"__internal\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"__audit\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"record\",\r\n"
			+ "      \"name\" : \"__audit\",\r\n"
			+ "      \"doc\" : \"If data is transformed this information is recorded here\",\r\n"
			+ "      \"fields\" : [ {\r\n"
			+ "        \"name\" : \"__transformresult\",\r\n"
			+ "        \"type\" : {\r\n"
			+ "          \"type\" : \"string\",\r\n"
			+ "          \"logicalType\" : \"VARCHAR\",\r\n"
			+ "          \"length\" : 4\r\n"
			+ "        },\r\n"
			+ "        \"doc\" : \"Is the record PASS, FAILED or WARN?\",\r\n"
			+ "        \"__originalname\" : \"__transformresult\"\r\n"
			+ "      }, {\r\n"
			+ "        \"name\" : \"__details\",\r\n"
			+ "        \"type\" : [ \"null\", {\r\n"
			+ "          \"type\" : \"array\",\r\n"
			+ "          \"items\" : {\r\n"
			+ "            \"type\" : \"record\",\r\n"
			+ "            \"name\" : \"__audit_details\",\r\n"
			+ "            \"doc\" : \"Details of all transformations\",\r\n"
			+ "            \"fields\" : [ {\r\n"
			+ "              \"name\" : \"__transformationname\",\r\n"
			+ "              \"type\" : {\r\n"
			+ "                \"type\" : \"string\",\r\n"
			+ "                \"logicalType\" : \"NVARCHAR\",\r\n"
			+ "                \"length\" : 1024\r\n"
			+ "              },\r\n"
			+ "              \"doc\" : \"A name identifiying the applied transformation\",\r\n"
			+ "              \"__originalname\" : \"__transformationname\"\r\n"
			+ "            }, {\r\n"
			+ "              \"name\" : \"__transformresult\",\r\n"
			+ "              \"type\" : {\r\n"
			+ "                \"type\" : \"string\",\r\n"
			+ "                \"logicalType\" : \"VARCHAR\",\r\n"
			+ "                \"length\" : 4\r\n"
			+ "              },\r\n"
			+ "              \"doc\" : \"Is the record PASS, FAIL or WARN?\",\r\n"
			+ "              \"__originalname\" : \"__transformresult\"\r\n"
			+ "            }, {\r\n"
			+ "              \"name\" : \"__transformresult_text\",\r\n"
			+ "              \"type\" : [ \"null\", {\r\n"
			+ "                \"type\" : \"string\",\r\n"
			+ "                \"logicalType\" : \"NVARCHAR\",\r\n"
			+ "                \"length\" : 1024\r\n"
			+ "              } ],\r\n"
			+ "              \"doc\" : \"Transforms can optionally describe what they did\",\r\n"
			+ "              \"__originalname\" : \"__transformresult_text\"\r\n"
			+ "            }, {\r\n"
			+ "              \"name\" : \"__transformresult_quality\",\r\n"
			+ "              \"type\" : [ \"null\", {\r\n"
			+ "                \"type\" : \"int\",\r\n"
			+ "                \"logicalType\" : \"BYTE\"\r\n"
			+ "              } ],\r\n"
			+ "              \"doc\" : \"Transforms can optionally return a percent value from 0 (FAIL) to 100 (PASS)\",\r\n"
			+ "              \"__originalname\" : \"__transformresult_quality\"\r\n"
			+ "            } ],\r\n"
			+ "            \"__originalname\" : \"__audit_details\"\r\n"
			+ "          }\r\n"
			+ "        } ],\r\n"
			+ "        \"doc\" : \"Details of all transformations\",\r\n"
			+ "        \"default\" : null,\r\n"
			+ "        \"__originalname\" : \"__details\"\r\n"
			+ "      } ],\r\n"
			+ "      \"__originalname\" : \"__audit\"\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"If data is transformed this information is recorded here\",\r\n"
			+ "    \"default\" : null,\r\n"
			+ "    \"__originalname\" : \"__audit\",\r\n"
			+ "    \"__internal\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"PKCOL1\",\r\n"
			+ "    \"type\" : {\r\n"
			+ "      \"type\" : \"string\",\r\n"
			+ "      \"logicalType\" : \"NVARCHAR\",\r\n"
			+ "      \"length\" : 10\r\n"
			+ "    },\r\n"
			+ "    \"__originalname\" : \"PKCOL1\",\r\n"
			+ "    \"__primary_key_column\" : true\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"An_x002fAvron_x0026unsupported_x0024Columnname\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"int\",\r\n"
			+ "      \"logicalType\" : \"INT\"\r\n"
			+ "    } ],\r\n"
			+ "    \"__originalname\" : \"An/Avron&unsupported$Columnname\"\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"ARRAY1\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"array\",\r\n"
			+ "      \"items\" : {\r\n"
			+ "        \"type\" : \"int\",\r\n"
			+ "        \"logicalType\" : \"date\"\r\n"
			+ "      }\r\n"
			+ "    } ],\r\n"
			+ "    \"doc\" : \"Array of dates\",\r\n"
			+ "    \"default\" : null,\r\n"
			+ "    \"__originalname\" : \"ARRAY1\"\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"nested_record\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"record\",\r\n"
			+ "      \"name\" : \"nested_schema1\",\r\n"
			+ "      \"fields\" : [ {\r\n"
			+ "        \"name\" : \"N1\",\r\n"
			+ "        \"type\" : [ \"null\", {\r\n"
			+ "          \"type\" : \"double\",\r\n"
			+ "          \"logicalType\" : \"DOUBLE\"\r\n"
			+ "        } ],\r\n"
			+ "        \"__originalname\" : \"N1\"\r\n"
			+ "      }, {\r\n"
			+ "        \"name\" : \"N2\",\r\n"
			+ "        \"type\" : [ \"null\", {\r\n"
			+ "          \"type\" : \"double\",\r\n"
			+ "          \"logicalType\" : \"DOUBLE\"\r\n"
			+ "        } ],\r\n"
			+ "        \"__originalname\" : \"N2\"\r\n"
			+ "      } ],\r\n"
			+ "      \"__originalname\" : \"nested_schema1\"\r\n"
			+ "    } ],\r\n"
			+ "    \"default\" : null,\r\n"
			+ "    \"__originalname\" : \"nested_record\"\r\n"
			+ "  }, {\r\n"
			+ "    \"name\" : \"children\",\r\n"
			+ "    \"type\" : [ \"null\", {\r\n"
			+ "      \"type\" : \"array\",\r\n"
			+ "      \"items\" : \"nested_schema1\"\r\n"
			+ "    } ],\r\n"
			+ "    \"default\" : null,\r\n"
			+ "    \"__originalname\" : \"children\"\r\n"
			+ "  } ],\r\n"
			+ "  \"__originalname\" : \"Schema1\"\r\n"
			+ "}";
	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void test() {
		try {
			ValueSchema builder = new ValueSchema("Schema1", null);
			builder.add("PKCOL1", AvroNVarchar.getSchema(10), null, false).setPrimaryKey();
			builder.add("An/Avron&unsupported$Columnname", AvroInt.getSchema(), null, true);
			builder.addColumnArray("ARRAY1", AvroDate.getSchema(), "Array of dates");
			SchemaBuilder nested_record_builder = new SchemaBuilder("nested_schema1", null);
			nested_record_builder.add("N1", AvroDouble.getSchema(), null, true);
			nested_record_builder.add("N2", AvroDouble.getSchema(), null, true);
			builder.addColumnRecord("nested_record", nested_record_builder , null, true);
			builder.addColumnRecordArray("children", nested_record_builder, null);
			builder.build();
			Schema actualschema = builder.getSchema();
			Schema expectedschema = new Schema.Parser().parse(expectedschemajson);
			assertEquals("The built schema is different from the expected schema", expectedschema, actualschema);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}

}
